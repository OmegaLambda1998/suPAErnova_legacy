[project]
authors = [
    { name = "Patrick Armstrong", email = "patrick.james.1998@gmail.com" },
]
description = "Add your description here"
name = "supaernova_legacy"
readme = "README.md"
requires-python = ">=3.12"
version = "0.1.0"
dependencies = [
    "astropy>=7.1.0",
    "pandas>=2.2.3",
    "ruamel-yaml>=0.18.10",
    "sncosmo>=2.12.1",
    "tensorflow>=2.18.0",
    "tensorflow-probability[tf]>=0.25.0",
    "tqdm>=4.67.1",
]

[project.scripts]
supaernova-legacy = "supaernova_legacy:main"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[dependency-groups]
dev = ["pandas-stubs>=2.2.3.250308", "types-tensorflow>=2.18.0.20250506"]
jupyter = ["jupyter>=1.1.1"]
tests = [
    "matplotlib>=3.10.3",
    "pytest>=8.3.5",
    "pytest-json-ctrf>=0.3.5",
    "pytest-richer>=0.1.1",
]

[tool.ruff]
# Enumerate all fixed violations.
show-fixes = true

# Disable application of unsafe fixes.
unsafe-fixes = true

# --- Format: Ruff ---
[tool.ruff.format]
# Enable preview style formatting
preview = true

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]
# Enable preview features
preview = true

# Show all lint rules (except preview) by default
select = ["ALL"]

# Rules to ignore
ignore = [
    "COM812",  # Missing trailing comma, already handled by formatter
    "E501",    # Line too long 
    "ERA001",  # Found commented out code
    "G004",    # Logging statement uses f-string
    "N999",    # Invalid module name
    "PLR0913", # Too many arguments in function definition (_ > 5) 
    "PLR0917", # Too many positional arguments (_/5) 
    "ANN401",  # Allow *args: Any and **kwargs: Any
    "UP037",   # Don't remove quotes from type annotations
    "TC008",   # Don't remove quotes from type aliases
    "F722",    # Ignore forward annotation syntax errors
]

# Consider all rules fixable
fixable = ["ALL"]

# Except these rules
unfixable = [
    "F401", # unused-import, will remove unused imports
    "F841", # unused-variable, will remove unused variables not prepended with an `_`
    "T201", # Print statements
]

# --- Flake8 ---
# Copyright Author
[tool.ruff.lint.flake8-copyright]
author = "Patrick Armstrong"


# Type Checking
[tool.ruff.lint.flake8-type-checking]
# Move type-specific imports into an if statement
# By placing some type annotations in quotes
quote-annotations = true
# Be strict with type-specific imports
strict = true

# --- ISort ---
[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-sort-within-sections = true
force-wrap-aliases = true
from-first = true
length-sort = true
length-sort-straight = true

# --- PyDocStyle ---
[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]
